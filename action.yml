name: run-ecs-task
description: Run ECS task from task definition
inputs:
  ecs-cluster:
    description: ECS cluster to run a task
    required: false
    default: 'default'
  subnet:
    description: AWS subnet to run a task
    required: true
  security-group:
    description: AWS security group to assign for a task
    required: true
  task-definition:
    description: ECS task definition file to run
    required: true
  aws-region:
    description: AWS region for loading AWS credentials
    required: false
    default: 'us-east-1'
  aws-account-id:
    description: AWS account id
    required: true
  aws-access-key-id:
    description: AWS access key
    required: true
  aws-secret-access-key:
    description: AWS secret key
    required: true

runs:
  using: 'composite'
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/ExternalManager
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
        role-skip-session-tagging: true
        role-duration-seconds: 3600

    - name: Deploy ECS task definition
      id: task-deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ inputs.task-definition }}
        cluster: ${{ inputs.ecs-cluster }}
        wait-for-service-stability: true

    - name: Run ECS task
      id: task-run
      shell: sh
      run: |
          json=$(aws ecs run-task \
              --cluster ${{ inputs.ecs-cluster }} \
              --count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[${{ inputs.subnet }}],securityGroups=[${{ inputs.security-group }}]}" \
              --task-definition ${{ steps.task-deploy.outputs.task-definition-arn}})
          arn=$(echo $json | jq '.tasks[0].taskArn' | sed -e 's/^"//' -e 's/"$//')
          echo "::set-output name=task-arn::$arn"

    - name: Wait ECS task
      shell: sh
      run: |
          aws ecs wait tasks-stopped \
              --cluster ${{ inputs.ecs-cluster }} \
              --tasks ${{ steps.task-run.outputs.task-arn}}
